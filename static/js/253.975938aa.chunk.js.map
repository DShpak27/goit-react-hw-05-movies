{"version":3,"file":"static/js/253.975938aa.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/CastList/CastList.module.scss?41a0","components/CastList/CastList.jsx","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.scss?0e19","components/Cast/Cast.jsx","webpack://goit-react-hw-05-movies/./src/components/ErrorMessageBlock/ErrorMessageBlock.module.scss?8171","components/ErrorMessageBlock/ErrorMessageBlock.jsx","services/searchService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"CastList_castList__5jq+V\",\"actorName\":\"CastList_actorName__IWjvo\",\"actorCharacter\":\"CastList_actorCharacter__tqRHX\",\"fotoWrapper\":\"CastList_fotoWrapper__iitKc\",\"foto\":\"CastList_foto__9BH9U\"};","import propTypes from 'prop-types';\r\nimport css from './CastList.module.scss';\r\n\r\nexport default function CastList({ movieCast }) {\r\n    return (\r\n        <ul className={css.castList}>\r\n            {movieCast.map(actor => {\r\n                return (\r\n                    <li className={css.castListItem} key={actor.id}>\r\n                        <p className={css.actorName}>{actor.name}</p>\r\n                        <p className={css.actorCharacter}>\r\n                            Character: {actor.character}\r\n                        </p>\r\n                        <div className={css.fotoWrapper}>\r\n                            <img\r\n                                className={css.foto}\r\n                                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\r\n                                alt=\"actor foto\"\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nCastList.propTypes = {\r\n    movieCast: propTypes.array.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"nothingFoundText\":\"Cast_nothingFoundText__GMEW+\"};","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport movieServiceApi from '../../services/searchService.js';\r\nimport ErrorMessageBlock from '../../components/ErrorMessageBlock/ErrorMessageBlock.jsx';\r\nimport CastList from '../CastList/CastList.jsx';\r\nimport css from './Cast.module.scss';\r\n\r\nexport default function Cast() {\r\n    const { movieId } = useParams();\r\n    const [movieCast, setMovieCast] = useState([]);\r\n    const [status, setStatus] = useState('indefined');\r\n    const [errorDescription, setErrorDescription] = useState('');\r\n\r\n    const getMovieCast = id => {\r\n        movieServiceApi\r\n            .getCast(id)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.status);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data.cast.length) {\r\n                    setMovieCast(data.cast);\r\n                    setStatus('ok');\r\n                } else {\r\n                    setStatus('nothing found');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setErrorDescription(error.message);\r\n                setStatus('error');\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieCast(movieId);\r\n    }, [movieId]);\r\n\r\n    return (\r\n        <>\r\n            {status === 'ok' && <CastList movieCast={movieCast} />}\r\n            {status === 'nothing found' && (\r\n                <p className={css.nothingFoundText}>\r\n                    We don't have avy cast information for this movie.\r\n                </p>\r\n            )}\r\n            {status === 'error' && (\r\n                <ErrorMessageBlock errorDescription={errorDescription} />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessageBlock_errorMessage__rcMMp\"};","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport css from './ErrorMessageBlock.module.scss';\r\n\r\nfunction ErrorMessageBlock({ errorDescription }) {\r\n    return (\r\n        <p className={css.errorMessage}>\r\n            An error occurred!\r\n            <br />\r\n            Type of error: '{errorDescription}'.\r\n            <br />\r\n            Try again later...\r\n        </p>\r\n    );\r\n}\r\n\r\nErrorMessageBlock.propTypes = {\r\n    errorDescription: propTypes.string.isRequired,\r\n};\r\n\r\nexport default ErrorMessageBlock;\r\n","const movieServiceApi = {\r\n    baseUrl: 'https://api.themoviedb.org/3/',\r\n    userKey: 'a3cb0cf762fe02df8fbdba8f47fbe85b',\r\n    currentQuery: '',\r\n    pageNumber: 1,\r\n\r\n    makeSearchParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n            query: this.currentQuery,\r\n            page: this.pageNumber,\r\n        });\r\n    },\r\n\r\n    makeUrlParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n        });\r\n    },\r\n\r\n    getTrending(typeOfTrending = 'movie', trendingPeriod = 'day') {\r\n        const typeOfService = 'trending';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${typeOfService}/${typeOfTrending}/${trendingPeriod}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getMovieById(id) {\r\n        const urlPart = 'movie';\r\n        return fetch(`${this.baseUrl}${urlPart}/${id}?${this.makeUrlParams()}`);\r\n    },\r\n\r\n    getReviewsById(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'reviews';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getSearchedMovies(value) {\r\n        this.currentQuery = value;\r\n        const urlPart = 'search/movie';\r\n        return fetch(`${this.baseUrl}${urlPart}?${this.makeSearchParams()}`);\r\n    },\r\n\r\n    getCast(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'credits';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n};\r\n\r\nexport default movieServiceApi;\r\n"],"names":["CastList","movieCast","className","css","map","actor","name","character","src","profile_path","alt","id","Cast","movieId","useParams","useState","setMovieCast","status","setStatus","errorDescription","setErrorDescription","useEffect","movieServiceApi","then","response","ok","Error","json","data","cast","length","catch","error","message","ErrorMessageBlock","baseUrl","userKey","currentQuery","pageNumber","makeSearchParams","URLSearchParams","api_key","this","query","page","makeUrlParams","getTrending","typeOfTrending","trendingPeriod","typeOfService","fetch","getMovieById","getReviewsById","getSearchedMovies","value","getCast"],"sourceRoot":""}