{"version":3,"file":"static/js/467.f08be1c5.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/ErrorMessageBlock/ErrorMessageBlock.module.scss?8171","components/ErrorMessageBlock/ErrorMessageBlock.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.scss?f9f6","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.scss?c7a6","pages/Movies/Movies.jsx","services/searchService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessageBlock_errorMessage__rcMMp\"};","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport css from './ErrorMessageBlock.module.scss';\r\n\r\nfunction ErrorMessageBlock({ errorDescription }) {\r\n    return (\r\n        <p className={css.errorMessage}>\r\n            An error occurred!\r\n            <br />\r\n            Type of error: '{errorDescription}'.\r\n            <br />\r\n            Try again later...\r\n        </p>\r\n    );\r\n}\r\n\r\nErrorMessageBlock.propTypes = {\r\n    errorDescription: propTypes.string.isRequired,\r\n};\r\n\r\nexport default ErrorMessageBlock;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"MovieList_movieList__pH29x\",\"Link\":\"MovieList_Link__jGEDg\"};","import propTypes from 'prop-types';\r\nimport { useLocation } from 'react-router-dom';\r\nimport css from './MovieList.module.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction MovieList({ moviesList }) {\r\n    const location = useLocation();\r\n    const path = location.pathname === '/' ? 'movies/' : '';\r\n    return (\r\n        <ul className={css.movieList}>\r\n            {moviesList.map(movie => {\r\n                return (\r\n                    <li key={movie.id} className={css.movieListItem}>\r\n                        <Link\r\n                            className={css.Link}\r\n                            // to={`/movies/${movie.id}`}\r\n                            // to={`/movies/${movie.id}`}\r\n                            to={`${path}${movie.id}`}\r\n                            state={{ from: location }}\r\n                        >\r\n                            {movie.title}\r\n                        </Link>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nMovieList.propTypes = {\r\n    moviesList: propTypes.arrayOf(propTypes.object).isRequired,\r\n};\r\n\r\nexport default MovieList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"Movies_movieList__CNTgI\",\"Link\":\"Movies_Link__L7rkn\",\"searchForm\":\"Movies_searchForm__9X0r6\",\"searchInput\":\"Movies_searchInput__waNIF\",\"submitBtn\":\"Movies_submitBtn__XNyNV\",\"nothingFoundText\":\"Movies_nothingFoundText__HxO93\"};","import { useState, useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport css from './Movies.module.scss';\r\nimport MovieList from '../../components/MovieList/MovieList.jsx';\r\nimport ErrorMessageBlock from '../../components/ErrorMessageBlock/ErrorMessageBlock.jsx';\r\nimport movieServiceApi from '../../services/searchService.js';\r\n\r\nexport default function Movies() {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const movieName = searchParams.get('name') ?? '';\r\n\r\n    const updateQueryString = name => {\r\n        const nextParams = name !== '' ? { name } : {};\r\n        setSearchParams(nextParams);\r\n    };\r\n    const findMovies = query => {\r\n        movieServiceApi\r\n            .getSearchedMovies(query)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.status);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (!data.results.length) {\r\n                    setStatus('not found');\r\n                } else {\r\n                    setfindedMovies(data.results);\r\n                    setStatus('ok');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setErrorDescription(error.message);\r\n                setStatus('error');\r\n            });\r\n    };\r\n    const [status, setStatus] = useState('undefined');\r\n    const [errorDescription, setErrorDescription] = useState('');\r\n    const [findedMovies, setfindedMovies] = useState([]);\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const curentQuery = evt.currentTarget.elements.searchInput.value\r\n            .trim()\r\n            .toLowerCase();\r\n\r\n        if (curentQuery === '') {\r\n            return;\r\n        }\r\n        findMovies(curentQuery);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (movieName === '') {\r\n            return;\r\n        }\r\n        findMovies(movieName);\r\n    }, [movieName]);\r\n\r\n    return (\r\n        <section className={css.movieSearch}>\r\n            <form\r\n                className={css.searchForm}\r\n                autoComplete=\"off\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <input\r\n                    className={css.searchInput}\r\n                    type=\"text\"\r\n                    name=\"searchInput\"\r\n                    placeholder=\"Type a movie title you need to find\"\r\n                    autoFocus=\"on\"\r\n                    value={movieName}\r\n                    onChange={evt => updateQueryString(evt.target.value)}\r\n                />\r\n                <button className={css.submitBtn} type=\"submit\">\r\n                    Search\r\n                </button>\r\n            </form>\r\n            {status === 'ok' && <MovieList moviesList={findedMovies} />}\r\n            {status === 'error' && (\r\n                <ErrorMessageBlock errorDescription={errorDescription} />\r\n            )}\r\n            {status === 'not found' && (\r\n                <p className={css.nothingFoundText}>\r\n                    We didn't find anything with that name! Try another name...\r\n                </p>\r\n            )}\r\n        </section>\r\n    );\r\n}\r\n","const movieServiceApi = {\r\n    baseUrl: 'https://api.themoviedb.org/3/',\r\n    userKey: 'a3cb0cf762fe02df8fbdba8f47fbe85b',\r\n    currentQuery: '',\r\n    pageNumber: 1,\r\n\r\n    makeSearchParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n            query: this.currentQuery,\r\n            page: this.pageNumber,\r\n        });\r\n    },\r\n\r\n    makeUrlParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n        });\r\n    },\r\n\r\n    getTrending(typeOfTrending = 'movie', trendingPeriod = 'day') {\r\n        const typeOfService = 'trending';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${typeOfService}/${typeOfTrending}/${trendingPeriod}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getMovieById(id) {\r\n        const urlPart = 'movie';\r\n        return fetch(`${this.baseUrl}${urlPart}/${id}?${this.makeUrlParams()}`);\r\n    },\r\n\r\n    getReviewsById(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'reviews';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getSearchedMovies(value) {\r\n        this.currentQuery = value;\r\n        const urlPart = 'search/movie';\r\n        return fetch(`${this.baseUrl}${urlPart}?${this.makeSearchParams()}`);\r\n    },\r\n\r\n    getCast(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'credits';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n};\r\n\r\nexport default movieServiceApi;\r\n"],"names":["errorDescription","className","css","moviesList","location","useLocation","path","pathname","map","movie","to","id","state","from","title","Movies","useSearchParams","searchParams","setSearchParams","movieName","get","findMovies","query","movieServiceApi","then","response","ok","Error","status","json","data","results","length","setfindedMovies","setStatus","catch","error","setErrorDescription","message","useState","findedMovies","useEffect","autoComplete","onSubmit","evt","preventDefault","curentQuery","currentTarget","elements","searchInput","value","trim","toLowerCase","type","name","placeholder","autoFocus","onChange","target","MovieList","ErrorMessageBlock","baseUrl","userKey","currentQuery","pageNumber","makeSearchParams","URLSearchParams","api_key","this","page","makeUrlParams","getTrending","typeOfTrending","trendingPeriod","typeOfService","fetch","getMovieById","getReviewsById","getSearchedMovies","getCast"],"sourceRoot":""}