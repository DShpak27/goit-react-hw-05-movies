{"version":3,"file":"static/js/132.13bb3984.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/ErrorMessageBlock/ErrorMessageBlock.module.scss?8171","components/ErrorMessageBlock/ErrorMessageBlock.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.scss?57ee","pages/MovieDetails/MovieDetails.jsx","services/searchService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessageBlock_errorMessage__rcMMp\"};","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport css from './ErrorMessageBlock.module.scss';\r\n\r\nfunction ErrorMessageBlock({ errorDescription }) {\r\n    return (\r\n        <p className={css.errorMessage}>\r\n            An error occurred!\r\n            <br />\r\n            Type of error: '{errorDescription}'.\r\n            <br />\r\n            Try again later...\r\n        </p>\r\n    );\r\n}\r\n\r\nErrorMessageBlock.propTypes = {\r\n    errorDescription: propTypes.string.isRequired,\r\n};\r\n\r\nexport default ErrorMessageBlock;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"goBackBtn\":\"MovieDetails_goBackBtn__7oLPV\",\"topWrapper\":\"MovieDetails_topWrapper__9qe9I\",\"moviePosterWrapper\":\"MovieDetails_moviePosterWrapper__doLKL\",\"title\":\"MovieDetails_title__n1pns\",\"text\":\"MovieDetails_text__ZV8Di\",\"navLink\":\"MovieDetails_navLink__YVxwB\",\"navLinkActive\":\"MovieDetails_navLinkActive__6Bvio\",\"bottomWrapper\":\"MovieDetails_bottomWrapper__+nfhu\",\"LinkWrapper\":\"MovieDetails_LinkWrapper__bjlnx\"};","import { useEffect, useState } from 'react';\r\nimport { Suspense } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport ErrorMessageBlock from '../../components/ErrorMessageBlock/ErrorMessageBlock.jsx';\r\nimport movieServiceApi from '../../services/searchService.js';\r\nimport { NavLink, Outlet } from 'react-router-dom';\r\nimport css from './MovieDetails.module.scss';\r\n\r\nconst makeLinkStyle = ({ isActive }) =>\r\n    isActive ? `${css.navLink} ${css.navLinkActive}` : css.navLink;\r\n\r\nexport default function MovieDetails() {\r\n    const { movieId } = useParams();\r\n    const [movieInfo, setMovieInfo] = useState({});\r\n    const [status, setStatus] = useState('ok');\r\n    const [errorDescription, setErrorDescription] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const location = useLocation();\r\n    const localtionState = { from: location.state?.from };\r\n\r\n    const goBack = () => navigate(location.state?.from || '/movies');\r\n\r\n    const getMovieInfo = movieId => {\r\n        movieServiceApi\r\n            .getMovieById(movieId)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.status);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                const posterPath = `https://image.tmdb.org/t/p/w200${data.poster_path}`;\r\n                const title = data.title;\r\n                const releaseDate = `(${data.release_date.slice(0, 4)})`;\r\n                const userScore = `${(data.vote_average * 10).toFixed(0)}%`;\r\n                const overview = data.overview;\r\n                const genres = data.genres.map(genre => genre.name).join(' ');\r\n                setMovieInfo({\r\n                    posterPath,\r\n                    title,\r\n                    releaseDate,\r\n                    userScore,\r\n                    overview,\r\n                    genres,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setErrorDescription(error.message);\r\n                setStatus('error');\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieInfo(movieId);\r\n    }, [movieId]);\r\n\r\n    return (\r\n        <main>\r\n            <section className={css.movieDetails}>\r\n                <button className={css.goBackBtn} onClick={goBack}>\r\n                    GoBack\r\n                </button>\r\n                {status === 'ok' && (\r\n                    <>\r\n                        <div className={css.topWrapper}>\r\n                            <div className={css.moviePosterWrapper}>\r\n                                <img\r\n                                    src={movieInfo.posterPath}\r\n                                    alt=\"the movie poster\"\r\n                                />\r\n                            </div>\r\n                            <div className={css.movieInfoWrapper}>\r\n                                <h1\r\n                                    className={css.title}\r\n                                >{`${movieInfo.title} ${movieInfo.releaseDate}`}</h1>\r\n                                <p className={css.text}>\r\n                                    User Score: {movieInfo.userScore}\r\n                                </p>\r\n                                <h2 className={css.title}>Overview</h2>\r\n                                <p className={css.text}>{movieInfo.overview}</p>\r\n                                <h3 className={css.title}>Genres</h3>\r\n                                <p className={css.text}>{movieInfo.genres}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className={css.bottomWrapper}>\r\n                            <h4 className={css.title}>\r\n                                Additional information\r\n                            </h4>\r\n                            <div className={css.LinkWrapper}>\r\n                                <NavLink\r\n                                    className={makeLinkStyle}\r\n                                    to=\"cast\"\r\n                                    state={localtionState}\r\n                                >\r\n                                    Cast\r\n                                </NavLink>\r\n                                <NavLink\r\n                                    className={makeLinkStyle}\r\n                                    to=\"reviews\"\r\n                                    state={localtionState}\r\n                                >\r\n                                    Reviews\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                {status === 'error' && (\r\n                    <ErrorMessageBlock errorDescription={errorDescription} />\r\n                )}\r\n            </section>\r\n            <Suspense fallback={<div>Loading subpage...</div>}>\r\n                <Outlet />\r\n            </Suspense>\r\n        </main>\r\n    );\r\n}\r\n","const movieServiceApi = {\r\n    baseUrl: 'https://api.themoviedb.org/3/',\r\n    userKey: 'a3cb0cf762fe02df8fbdba8f47fbe85b',\r\n    currentQuery: '',\r\n    pageNumber: 1,\r\n\r\n    makeSearchParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n            query: this.currentQuery,\r\n            page: this.pageNumber,\r\n        });\r\n    },\r\n\r\n    makeUrlParams() {\r\n        return new URLSearchParams({\r\n            api_key: this.userKey,\r\n        });\r\n    },\r\n\r\n    getTrending(typeOfTrending = 'movie', trendingPeriod = 'day') {\r\n        const typeOfService = 'trending';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${typeOfService}/${typeOfTrending}/${trendingPeriod}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getMovieById(id) {\r\n        const urlPart = 'movie';\r\n        return fetch(`${this.baseUrl}${urlPart}/${id}?${this.makeUrlParams()}`);\r\n    },\r\n\r\n    getReviewsById(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'reviews';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n\r\n    getSearchedMovies(value) {\r\n        this.currentQuery = value;\r\n        const urlPart = 'search/movie';\r\n        return fetch(`${this.baseUrl}${urlPart}?${this.makeSearchParams()}`);\r\n    },\r\n\r\n    getCast(id) {\r\n        const urlPart = 'movie';\r\n        const urlSuffix = 'credits';\r\n        return fetch(\r\n            `${\r\n                this.baseUrl\r\n            }${urlPart}/${id}/${urlSuffix}?${this.makeUrlParams()}`\r\n        );\r\n    },\r\n};\r\n\r\nexport default movieServiceApi;\r\n"],"names":["errorDescription","className","css","makeLinkStyle","isActive","MovieDetails","movieId","useParams","useState","movieInfo","setMovieInfo","status","setStatus","setErrorDescription","navigate","useNavigate","location","useLocation","localtionState","from","state","useEffect","movieServiceApi","then","response","ok","Error","json","data","posterPath","poster_path","title","releaseDate","release_date","slice","userScore","vote_average","toFixed","overview","genres","map","genre","name","join","catch","error","message","getMovieInfo","onClick","src","alt","to","ErrorMessageBlock","Suspense","fallback","baseUrl","userKey","currentQuery","pageNumber","makeSearchParams","URLSearchParams","api_key","this","query","page","makeUrlParams","getTrending","typeOfTrending","trendingPeriod","typeOfService","fetch","getMovieById","id","getReviewsById","getSearchedMovies","value","getCast"],"sourceRoot":""}